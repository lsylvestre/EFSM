
** Conflict (shift/reduce) in state 317.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

NOT exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 317, looking ahead at HAT, reducing production
** prim(exp_li) -> NOT exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
NOT exp_li . 

** In state 317, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

NOT exp_li 
    exp_li_without_paren 
    prim(exp_li) 
    exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 316.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

MINUS exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 316, looking ahead at HAT, reducing production
** prim(exp_li) -> MINUS exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
MINUS exp_li . 

** In state 316, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

MINUS exp_li 
      exp_li_without_paren 
      prim(exp_li) 
      exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 307.
** Token involved: RPAREN
** This state is reached from li after reading:

LPAREN loption(separated_nonempty_list(COMMA,lvalue(exp_li))) RPAREN COLONEQ LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
inst(exp_li) SEMICOL exp_li 
(?)

** In state 307, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN loption(separated_nonempty_list(COMMA,lvalue(exp_li))) RPAREN COLONEQ LPAREN loption(separated_nonempty_list(COMMA,exp_li)) RPAREN 
                                                                                    separated_nonempty_list(COMMA,exp_li) 
                                                                                    exp_li 
                                                                                    exp_li_without_paren 
                                                                                    caml_prim 
                                                                                    . RPAREN exp_li LPAREN COLONEQ exp_li 

** In state 307, looking ahead at RPAREN, reducing production
** loption(separated_nonempty_list(COMMA,exp_li)) ->
** is permitted because of the following sub-derivation:

LPAREN loption(separated_nonempty_list(COMMA,lvalue(exp_li))) RPAREN COLONEQ LPAREN loption(separated_nonempty_list(COMMA,exp_li)) RPAREN // lookahead token appears
                                                                                    . 

** Conflict (shift/reduce) in state 294.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

LIST_TL exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 294, looking ahead at HAT, reducing production
** caml_prim -> LIST_TL exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
LIST_TL exp_li . 

** In state 294, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
LIST_TL exp_li 
        exp_li_without_paren 
        prim(exp_li) 
        exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 293.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

LIST_HD exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 293, looking ahead at HAT, reducing production
** caml_prim -> LIST_HD exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
LIST_HD exp_li . 

** In state 293, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
LIST_HD exp_li 
        exp_li_without_paren 
        prim(exp_li) 
        exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 286.
** Tokens involved: TIMES PLUS PIPE_PIPE NEQ MINUS LT LE LAND HAT GT GE EQ DOT
** The following explanations concentrate on token TIMES.
** This state is reached from li after reading:

LET separated_nonempty_list(AND,binding_li) IN exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 286, looking ahead at TIMES, reducing production
** exp_li_without_paren -> LET separated_nonempty_list(AND,binding_li) IN exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li TIMES exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
LET separated_nonempty_list(AND,binding_li) IN exp_li . 

** In state 286, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

LET separated_nonempty_list(AND,binding_li) IN exp_li 
                                               exp_li_without_paren 
                                               prim(exp_li) 
                                               exp_li . TIMES exp_li 

** Conflict (shift/reduce) in state 274.
** Tokens involved: TIMES PLUS PIPE_PIPE NEQ MINUS LT LE LAND HAT GT GE EQ DOT
** The following explanations concentrate on token TIMES.
** This state is reached from li after reading:

LET REC separated_nonempty_list(AND,fun_binding_li) IN exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 274, looking ahead at TIMES, reducing production
** exp_li_without_paren -> LET REC separated_nonempty_list(AND,fun_binding_li) IN exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li TIMES exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
LET REC separated_nonempty_list(AND,fun_binding_li) IN exp_li . 

** In state 274, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

LET REC separated_nonempty_list(AND,fun_binding_li) IN exp_li 
                                                       exp_li_without_paren 
                                                       prim(exp_li) 
                                                       exp_li . TIMES exp_li 

** Conflict (shift/reduce) in state 273.
** Tokens involved: TIMES PLUS PIPE_PIPE NEQ MINUS LT LE LAND HAT GT GE EQ DOT
** The following explanations concentrate on token TIMES.
** This state is reached from li after reading:

IF exp_li THEN exp_li ELSE exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 273, looking ahead at TIMES, reducing production
** exp_li_without_paren -> IF exp_li THEN exp_li ELSE exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li TIMES exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
IF exp_li THEN exp_li ELSE exp_li . 

** In state 273, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

IF exp_li THEN exp_li ELSE exp_li 
                           exp_li_without_paren 
                           prim(exp_li) 
                           exp_li . TIMES exp_li 

** Conflict (shift/reduce) in state 266.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

BANG exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 266, looking ahead at HAT, reducing production
** caml_prim -> BANG exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
BANG exp_li . 

** In state 266, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
BANG exp_li 
     exp_li_without_paren 
     prim(exp_li) 
     exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 265.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

ARRAY_LENGTH exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 265, looking ahead at HAT, reducing production
** caml_prim -> ARRAY_LENGTH exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
ARRAY_LENGTH exp_li . 

** In state 265, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
ARRAY_LENGTH exp_li 
             exp_li_without_paren 
             prim(exp_li) 
             exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 263.
** Tokens involved: TIMES PLUS PIPE_PIPE NEQ MINUS LT LE LAND HAT GT GE EQ DOT
** The following explanations concentrate on token TIMES.
** This state is reached from li after reading:

inst(exp_li) SEMICOL exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 263, looking ahead at TIMES, reducing production
** exp_li_without_paren -> inst(exp_li) SEMICOL exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li TIMES exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
inst(exp_li) SEMICOL exp_li . 

** In state 263, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

inst(exp_li) SEMICOL exp_li 
                     exp_li_without_paren 
                     prim(exp_li) 
                     exp_li . TIMES exp_li 

** Conflict (shift/reduce) in state 251.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

RPAREN exp_li LPAREN COLONEQ exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 251, looking ahead at HAT, reducing production
** caml_prim -> RPAREN exp_li LPAREN COLONEQ exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
RPAREN exp_li LPAREN COLONEQ exp_li . 

** In state 251, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
RPAREN exp_li LPAREN COLONEQ exp_li 
                             exp_li_without_paren 
                             prim(exp_li) 
                             exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 247.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

ident COLONEQ exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 247, looking ahead at HAT, reducing production
** caml_prim -> ident COLONEQ exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
ident COLONEQ exp_li . 

** In state 247, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

caml_prim 
ident COLONEQ exp_li 
              exp_li_without_paren 
              prim(exp_li) 
              exp_li . HAT INT_LIT 

** Conflict (reduce/reduce) in state 245.
** Token involved: RPAREN
** This state is reached from li after reading:

LPAREN ident LBRACKET exp_li RBRACKET

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
(?)

** In state 245, looking ahead at RPAREN, reducing production
** lvalue(exp_li) -> ident LBRACKET exp_li RBRACKET
** is permitted because of the following sub-derivation:

exp_li_without_paren 
inst(exp_li) SEMICOL exp_li 
LPAREN loption(separated_nonempty_list(COMMA,lvalue(exp_li))) RPAREN COLONEQ LPAREN loption(separated_nonempty_list(COMMA,exp_li)) RPAREN // lookahead token appears
       separated_nonempty_list(COMMA,lvalue(exp_li)) // lookahead token is inherited
       lvalue(exp_li) // lookahead token is inherited
       ident LBRACKET exp_li RBRACKET . 

** In state 245, looking ahead at RPAREN, reducing production
** prim(exp_li) -> ident LBRACKET exp_li RBRACKET
** is permitted because of the following sub-derivation:

LPAREN exp_li RPAREN // lookahead token appears
       exp_li_without_paren // lookahead token is inherited
       prim(exp_li) // lookahead token is inherited
       ident LBRACKET exp_li RBRACKET . 

** Conflict (shift/reduce) in state 244.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li EQ exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 244, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li EQ exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li EQ exp_li . 

** In state 244, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li EQ exp_li 
          exp_li_without_paren 
          prim(exp_li) 
          exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 242.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li GE exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 242, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li GE exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li GE exp_li . 

** In state 242, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li GE exp_li 
          exp_li_without_paren 
          prim(exp_li) 
          exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 240.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li GT exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 240, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li GT exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li GT exp_li . 

** In state 240, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li GT exp_li 
          exp_li_without_paren 
          prim(exp_li) 
          exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 238.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li LAND exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 238, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li LAND exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li LAND exp_li . 

** In state 238, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li LAND exp_li 
            exp_li_without_paren 
            prim(exp_li) 
            exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 236.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li LE exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 236, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li LE exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li LE exp_li . 

** In state 236, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li LE exp_li 
          exp_li_without_paren 
          prim(exp_li) 
          exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 234.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li LT exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 234, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li LT exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li LT exp_li . 

** In state 234, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li LT exp_li 
          exp_li_without_paren 
          prim(exp_li) 
          exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 232.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li MINUS exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 232, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li MINUS exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li MINUS exp_li . 

** In state 232, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li MINUS exp_li 
             exp_li_without_paren 
             prim(exp_li) 
             exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 230.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li NEQ exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 230, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li NEQ exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li NEQ exp_li . 

** In state 230, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li NEQ exp_li 
           exp_li_without_paren 
           prim(exp_li) 
           exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 228.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li PIPE_PIPE exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 228, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li PIPE_PIPE exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li PIPE_PIPE exp_li . 

** In state 228, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li PIPE_PIPE exp_li 
                 exp_li_without_paren 
                 prim(exp_li) 
                 exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 224.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li PLUS exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 224, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li PLUS exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li PLUS exp_li . 

** In state 224, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li PLUS exp_li 
            exp_li_without_paren 
            prim(exp_li) 
            exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 222.
** Tokens involved: TIMES PLUS PIPE_PIPE NEQ MINUS LT LE LAND HAT GT GE EQ DOT
** The following explanations concentrate on token TIMES.
** This state is reached from li after reading:

exp_li DOT LPAREN exp_li RPAREN LEFT_ARROW exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 222, looking ahead at TIMES, reducing production
** caml_prim -> exp_li DOT LPAREN exp_li RPAREN LEFT_ARROW exp_li
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li TIMES exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
caml_prim // lookahead token is inherited
exp_li DOT LPAREN exp_li RPAREN LEFT_ARROW exp_li . 

** In state 222, looking ahead at TIMES, shifting is permitted
** because of the following sub-derivation:

caml_prim 
exp_li DOT LPAREN exp_li RPAREN LEFT_ARROW exp_li 
                                           exp_li_without_paren 
                                           prim(exp_li) 
                                           exp_li . TIMES exp_li 

** Conflict (shift/reduce) in state 214.
** Tokens involved: HAT DOT
** The following explanations concentrate on token HAT.
** This state is reached from li after reading:

exp_li TIMES exp_li

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
(?)

** In state 214, looking ahead at HAT, reducing production
** prim(exp_li) -> exp_li TIMES exp_li
** is permitted because of the following sub-derivation:

exp_li HAT INT_LIT // lookahead token appears
exp_li_without_paren // lookahead token is inherited
prim(exp_li) // lookahead token is inherited
exp_li TIMES exp_li . 

** In state 214, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

exp_li TIMES exp_li 
             exp_li_without_paren 
             prim(exp_li) 
             exp_li . HAT INT_LIT 

** Conflict (shift/reduce) in state 209.
** Tokens involved: RPAREN LPAREN COLONEQ
** The following explanations concentrate on token COLONEQ.
** This state is reached from li after reading:

ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 209, looking ahead at COLONEQ, shifting is permitted
** because of the following sub-derivation:

caml_prim 
ident . COLONEQ exp_li 

** In state 209, looking ahead at COLONEQ, reducing production
** lvalue(exp_li) -> ident
** is permitted because of the following sub-derivation:

inst(exp_li) SEMICOL exp_li 
lvalue(exp_li) COLONEQ exp_li // lookahead token appears
ident . 

** Conflict (shift/reduce) in state 208.
** Tokens involved: RPAREN MINUS LPAREN
** The following explanations concentrate on token MINUS.
** This state is reached from li after reading:

ident LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
(?)

** In state 208, looking ahead at MINUS, reducing production
** exp_li_without_paren -> ident LPAREN RPAREN
** is permitted because of the following sub-derivation:

prim(exp_li) 
exp_li MINUS exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
ident LPAREN RPAREN . 

** In state 208, looking ahead at MINUS, shifting is permitted
** because of the following sub-derivation:

ident LPAREN exp_li COMMA separated_nonempty_list(COMMA,exp_li) RPAREN 
             exp_li_without_paren 
             caml_prim 
             RPAREN exp_li LPAREN COLONEQ exp_li 
                    exp_li_without_paren 
                    prim(exp_li) 
                    . MINUS exp_li 

** Conflict (shift/reduce) in state 206.
** Tokens involved: LPAREN COLONEQ
** The following explanations concentrate on token COLONEQ.
** This state is reached from li after reading:

NOT ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
exp_li_without_paren 
prim(exp_li) 
NOT exp_li 
    exp_li_without_paren 
    (?)

** In state 206, looking ahead at COLONEQ, shifting is permitted
** because of the following sub-derivation:

caml_prim 
ident . COLONEQ exp_li 

** In state 206, looking ahead at COLONEQ, reducing production
** lvalue(exp_li) -> ident
** is permitted because of the following sub-derivation:

inst(exp_li) SEMICOL exp_li 
lvalue(exp_li) COLONEQ exp_li // lookahead token appears
ident . 

** Conflict (shift/reduce) in state 183.
** Tokens involved: RPAREN MINUS LPAREN
** The following explanations concentrate on token MINUS.
** This state is reached from li after reading:

LPAREN RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
(?)

** In state 183, looking ahead at MINUS, reducing production
** const(exp_li) -> LPAREN RPAREN
** is permitted because of the following sub-derivation:

exp_li_without_paren 
prim(exp_li) 
exp_li MINUS exp_li // lookahead token appears
exp_li_without_paren // lookahead token is inherited
const(exp_li) // lookahead token is inherited
LPAREN RPAREN . 

** In state 183, looking ahead at MINUS, shifting is permitted
** because of the following sub-derivation:

LPAREN exp_li RPAREN 
       exp_li_without_paren 
       caml_prim 
       RPAREN exp_li LPAREN COLONEQ exp_li 
              exp_li_without_paren 
              prim(exp_li) 
              . MINUS exp_li 

** Conflict (shift/reduce) in state 182.
** Token involved: RPAREN
** This state is reached from li after reading:

LPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

li 
exp_li EOF 
(?)

** In state 182, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

LPAREN exp_li RPAREN 
       exp_li_without_paren 
       caml_prim 
       . RPAREN exp_li LPAREN COLONEQ exp_li 

** In state 182, looking ahead at RPAREN, reducing production
** loption(separated_nonempty_list(COMMA,lvalue(exp_li))) ->
** is permitted because of the following sub-derivation:

exp_li_without_paren 
inst(exp_li) SEMICOL exp_li 
LPAREN loption(separated_nonempty_list(COMMA,lvalue(exp_li))) RPAREN COLONEQ LPAREN loption(separated_nonempty_list(COMMA,exp_li)) RPAREN // lookahead token appears
       . 

** Conflict (shift/reduce) in state 174.
** Token involved: RPAREN
** This state is reached from fcf after reading:

LPAREN atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
(?)

** In state 174, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

atom 
LPAREN atom . RPAREN 

** In state 174, looking ahead at RPAREN, reducing production
** exp_fcf -> atom
** is permitted because of the following sub-derivation:

LPAREN exp_fcf RPAREN // lookahead token appears
       atom . 

** Conflict (shift/reduce) in state 77.
** Token involved: HAT
** This state is reached from fcf after reading:

NOT atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 77, looking ahead at HAT, reducing production
** prim(atom) -> NOT atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
NOT atom . 

** In state 77, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

NOT atom 
    prim(atom) 
    atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 76.
** Token involved: HAT
** This state is reached from fcf after reading:

MINUS atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 76, looking ahead at HAT, reducing production
** prim(atom) -> MINUS atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
MINUS atom . 

** In state 76, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

MINUS atom 
      prim(atom) 
      atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 54.
** Token involved: HAT
** This state is reached from fcf after reading:

atom EQ atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 54, looking ahead at HAT, reducing production
** prim(atom) -> atom EQ atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom EQ atom . 

** In state 54, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom EQ atom 
        prim(atom) 
        atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 52.
** Token involved: HAT
** This state is reached from fcf after reading:

atom GE atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 52, looking ahead at HAT, reducing production
** prim(atom) -> atom GE atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom GE atom . 

** In state 52, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom GE atom 
        prim(atom) 
        atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 50.
** Token involved: HAT
** This state is reached from fcf after reading:

atom GT atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 50, looking ahead at HAT, reducing production
** prim(atom) -> atom GT atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom GT atom . 

** In state 50, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom GT atom 
        prim(atom) 
        atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 48.
** Token involved: HAT
** This state is reached from fcf after reading:

atom LAND atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 48, looking ahead at HAT, reducing production
** prim(atom) -> atom LAND atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom LAND atom . 

** In state 48, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom LAND atom 
          prim(atom) 
          atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 46.
** Token involved: HAT
** This state is reached from fcf after reading:

atom LE atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 46, looking ahead at HAT, reducing production
** prim(atom) -> atom LE atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom LE atom . 

** In state 46, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom LE atom 
        prim(atom) 
        atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 44.
** Token involved: HAT
** This state is reached from fcf after reading:

atom LT atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 44, looking ahead at HAT, reducing production
** prim(atom) -> atom LT atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom LT atom . 

** In state 44, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom LT atom 
        prim(atom) 
        atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 42.
** Token involved: HAT
** This state is reached from fcf after reading:

atom MINUS atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 42, looking ahead at HAT, reducing production
** prim(atom) -> atom MINUS atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom MINUS atom . 

** In state 42, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom MINUS atom 
           prim(atom) 
           atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 40.
** Token involved: HAT
** This state is reached from fcf after reading:

atom NEQ atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 40, looking ahead at HAT, reducing production
** prim(atom) -> atom NEQ atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom NEQ atom . 

** In state 40, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom NEQ atom 
         prim(atom) 
         atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 38.
** Token involved: HAT
** This state is reached from fcf after reading:

atom PIPE_PIPE atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 38, looking ahead at HAT, reducing production
** prim(atom) -> atom PIPE_PIPE atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom PIPE_PIPE atom . 

** In state 38, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom PIPE_PIPE atom 
               prim(atom) 
               atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 36.
** Token involved: HAT
** This state is reached from fcf after reading:

atom PLUS atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 36, looking ahead at HAT, reducing production
** prim(atom) -> atom PLUS atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom PLUS atom . 

** In state 36, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom PLUS atom 
          prim(atom) 
          atom . HAT INT_LIT 

** Conflict (shift/reduce) in state 31.
** Token involved: HAT
** This state is reached from fcf after reading:

atom TIMES atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fcf 
exp_fcf EOF 
atom 
prim(atom) 
(?)

** In state 31, looking ahead at HAT, reducing production
** prim(atom) -> atom TIMES atom
** is permitted because of the following sub-derivation:

atom HAT INT_LIT // lookahead token appears
prim(atom) // lookahead token is inherited
atom TIMES atom . 

** In state 31, looking ahead at HAT, shifting is permitted
** because of the following sub-derivation:

atom TIMES atom 
           prim(atom) 
           atom . HAT INT_LIT 
